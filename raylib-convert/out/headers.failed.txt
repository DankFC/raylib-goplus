
//cannot process pointer return types
RLAPI void *GetWindowHandle(void);                                // Get native window handle

//invalid amount of matches for arguments
RLAPI void TraceLog(int logType, const char *text, ...);          // Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)

//cannot process pointer return types
RLAPI char **GetDirectoryFiles(const char *dirPath, int *count);  // Get filenames in a directory path (memory should be freed)

//cannot process pointer return types
RLAPI char **GetDroppedFiles(int *count);                         // Get dropped files names (memory should be freed)

//cannot process pointer return types
RLAPI Color *GetImageData(Image image);                                                                  // Get pixel data from image as a Color struct array

//cannot process pointer return types
RLAPI Vector4 *GetImageDataNormalized(Image image);                                                      // Get pixel data from image as Vector4 array (float normalized)

//cannot process void arg types
RLAPI void UpdateTexture(Texture2D texture, const void *pixels);                                         // Update GPU texture with new data

//cannot process pointer return types
RLAPI Color *ImageExtractPalette(Image image, int maxPaletteSize, int *extractCount);                    // Extract color palette from image to maximum size (memory should be freed)

//cannot process pointer return types
RLAPI CharInfo *LoadFontData(const char *fileName, int fontSize, int *fontChars, int charsCount, int type); // Load font data for further use

//cannot process pointer of pointer arg types
RLAPI Image GenImageFontAtlas(const CharInfo *chars, Rectangle **recs, int charsCount, int fontSize, int padding, int packMethod);  // Generate image font atlas using chars info

//invalid amount of matches for header
RLAPI void DrawTextRecEx(Font font, const char *text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint,

//invalid amount of matches for header
                         int selectStart, int selectLength, Color selectText, Color selectBack);    // Draw text using font inside rectangle limits with support for text selection

//invalid amount of matches for arguments
RLAPI const char *TextFormat(const char *text, ...);                                        // Text formatting with variables (sprintf style)

//cannot process pointer return types
RLAPI const char **TextSplit(const char *text, char delimiter, int *count);                 // Split text into multiple strings

//cannot process pointer return types
RLAPI int *GetCodepoints(const char *text, int *count);               // Get all codepoints in a string, codepoints count returned by parameters

//cannot process pointer return types
RLAPI Mesh *LoadMeshes(const char *fileName, int *meshCount);                                           // Load meshes from model file

//cannot process pointer return types
RLAPI Material *LoadMaterials(const char *fileName, int *materialCount);                                // Load materials from model file

//cannot process pointer return types
RLAPI ModelAnimation *LoadModelAnimations(const char *fileName, int *animsCount);                       // Load model animations from file

//cannot process void arg types
RLAPI void SetShaderValue(Shader shader, int uniformLoc, const void *value, int uniformType);               // Set shader uniform value

//cannot process void arg types
RLAPI void SetShaderValueV(Shader shader, int uniformLoc, const void *value, int uniformType, int count);   // Set shader uniform value vector

//cannot process void arg types
RLAPI void UpdateSound(Sound sound, const void *data, int samplesCount);// Update sound buffer with new data

//cannot process pointer return types
RLAPI float *GetWaveData(Wave wave);                                  // Get samples data from wave as a floats array

//cannot process void arg types
RLAPI void UpdateAudioStream(AudioStream stream, const void *data, int samplesCount); // Update audio stream buffers with data